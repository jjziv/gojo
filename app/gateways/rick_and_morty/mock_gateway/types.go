// Code generated by MockGen. DO NOT EDIT.
// Source: gateways/rick_and_morty/types.go

// Package mock_rick_and_morty is a generated GoMock package.
package mock_rick_and_morty

import (
	rick_and_morty "gojo/gateways/rick_and_morty"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGateway is a mock of Gateway interface.
type MockGateway struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayMockRecorder
}

// MockGatewayMockRecorder is the mock recorder for MockGateway.
type MockGatewayMockRecorder struct {
	mock *MockGateway
}

// NewMockGateway creates a new mock instance.
func NewMockGateway(ctrl *gomock.Controller) *MockGateway {
	mock := &MockGateway{ctrl: ctrl}
	mock.recorder = &MockGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGateway) EXPECT() *MockGatewayMockRecorder {
	return m.recorder
}

// GetCharacter mocks base method.
func (m *MockGateway) GetCharacter(id string) (rick_and_morty.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", id)
	ret0, _ := ret[0].(rick_and_morty.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockGatewayMockRecorder) GetCharacter(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockGateway)(nil).GetCharacter), id)
}

// GetCharacters mocks base method.
func (m *MockGateway) GetCharacters(ids string) ([]rick_and_morty.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacters", ids)
	ret0, _ := ret[0].([]rick_and_morty.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacters indicates an expected call of GetCharacters.
func (mr *MockGatewayMockRecorder) GetCharacters(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacters", reflect.TypeOf((*MockGateway)(nil).GetCharacters), ids)
}

// ListCharacters mocks base method.
func (m *MockGateway) ListCharacters() ([]rick_and_morty.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCharacters")
	ret0, _ := ret[0].([]rick_and_morty.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCharacters indicates an expected call of ListCharacters.
func (mr *MockGatewayMockRecorder) ListCharacters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharacters", reflect.TypeOf((*MockGateway)(nil).ListCharacters))
}

// SearchCharacters mocks base method.
func (m *MockGateway) SearchCharacters(name string) ([]rick_and_morty.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCharacters", name)
	ret0, _ := ret[0].([]rick_and_morty.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCharacters indicates an expected call of SearchCharacters.
func (mr *MockGatewayMockRecorder) SearchCharacters(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCharacters", reflect.TypeOf((*MockGateway)(nil).SearchCharacters), name)
}
